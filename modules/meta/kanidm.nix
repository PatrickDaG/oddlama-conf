{
  config,
  lib,
  ...
}: let
  inherit
    (lib)
    assertMsg
    filter
    genAttrs
    hasInfix
    head
    mdDoc
    mkIf
    mkOption
    removeSuffix
    types
    ;
in {
  options.services.kanidm.provision = {
    enable = mkEnableOption "provisioning of systems (oauth2), groups and users";

    persons = mkOption {
      description = "Provisioning of kanidm persons";
      default = {};
      type = types.attrsOf (types.submodule (personSubmod: {
        options = {
          present = mkOption {
            description = "Whether to ensure that this person is present or absent.";
            type = types.bool;
            default = true;
          };
        };
      }));
    };

    groups = mkOption {
      description = "Provisioning of kanidm groups";
      default = {};
      type = types.attrsOf (types.submodule (groupSubmod: {
        options = {
          present = mkOption {
            description = "Whether to ensure that this group is present or absent.";
            type = types.bool;
            default = true;
          };
        };
      }));
    };

    systems.oauth2 = mkOption {
      description = "Provisioning of oauth2 systems";
      default = {};
      type = types.attrsOf (types.submodule (oauth2Submod: {
        options = {
          present = mkOption {
            description = "Whether to ensure that this oauth2 system is present or absent.";
            type = types.bool;
            default = true;
          };

          url =
            mkOption {
            };

          basicSecretFile = mkOption {
            description = "The basic secret to use for this service. If null, the random secret generated by kanidm will not be touched. Do NOT use a path from the nix store here!";
            type = types.nullOr types.path;
            example = "/run/secrets/some-oauth2-basic-secret";
            default = null;
          };

          scopeMap = mkOption {
            type = types.listOf types.str;
            default = [];
          };

          supScopeMaps = mkOption {
            type = types.attrsOf types.str;
            default = {};
          };
        };
      }));
    };
  };

  config = {
  };
}
